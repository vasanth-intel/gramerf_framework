loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "benchmark_app"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64:{{ openvino_dir }}/opencv/lib:{{ openvino_dir }}/deployment_tools/ngraph/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

loader.env.LD_PRELOAD = "/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4"

fs.mounts = [
  { type = "chroot", uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
  { type = "chroot", uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
  { type = "chroot", uri = "file:/usr/{{ arch_libdir }}", path = "/usr/{{ arch_libdir }}" },
  { type = "chroot", uri = "file:/etc", path = "/etc" },
  { type = "chroot", uri = "file:{{ openvino_dir }}", path = "{{ openvino_dir }}" },
  { type = "chroot", uri = "file:{{ inference_engine_cpp_samples_build }}", path = "{{ inference_engine_cpp_samples_build }}" },
]

loader.insecure__use_cmdline_argv = true

sgx.enclave_size = "32G"
sgx.max_threads = 196

sgx.preheat_enclave = true
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
libos.check_invalid_pointers = false

sgx.trusted_files = [
  "file:/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4",
  "file:/usr/lib/x86_64-linux-gnu/libunwind.so.8",
  "file:benchmark_app",
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64/",
  "file:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib/",
  "file:{{ openvino_dir }}/opencv/lib/",
  "file:{{ openvino_dir }}/deployment_tools/ngraph/lib/",
  "file:{{ inference_engine_cpp_samples_build }}/intel64/Release/lib/",
  "file:model/",
]

sgx.allowed_files = [
  "file:/etc/ethers",
  "file:/etc/group",
  "file:/etc/hosts",
  "file:/etc/nsswitch.conf",
  "file:/etc/passwd",
  "file:output.txt",
]