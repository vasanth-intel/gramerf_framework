def g_gramerf_lib
def g_nodelabel

pipeline {
    agent none
    stages {
        stage('setup') {
            agent {
                label 'JK_POOL_MASTER'
            }
            environment {
                GRAMERF_GROOVY_LIB='ci/lib/gramerf-groovy-lib.groovy'
            }
            steps {
                script {
                    checkout scm
                    echo "Loading groovy library: ${env.GRAMERF_GROOVY_LIB}"
                    g_gramerf_lib = load(env.GRAMERF_GROOVY_LIB)
                    g_gramerf_lib.preActions()
                    g_nodelabel = g_gramerf_lib.getNodeName()
                    if (g_gramerf_lib.restartNode(g_nodelabel)){
                        echo "restarted $g_nodelabel successfully..."
                    } else {
                        error "Able to restart the execution node $g_nodelabel ..."
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        stage('run performance benchmarking'){
            agent {
                label g_nodelabel
            }
            steps {
                script {
                    cleanWs()
                    checkout scm
                    def args = "--ignore=gramine --disable-warnings --perf_config=${perf_config} --build_gramine=${build_gramine} --commit_id=${gramine_repo_commit_id} --iterations=${iterations} --exec_mode=${exec_mode}"
                    echo "is encryption needed : $encryption"
                    if (encryption) {
                        args = args + " --encryption=1"
                    }

                    if (!run_specific_perf_test?.trim()){
                        echo " selected marker $run will be executed"
                        sh "python3 -m pytest -s -v -m $run $args"
                    } else {
                        echo " specific performance test $run_specific_perf_test will be executed"
                        sh "python3 -m pytest -s -v -k $run_specific_perf_test $args"
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'logs/*, results/*'
                    // cleanWs()
                }
            }
        }
    }
}