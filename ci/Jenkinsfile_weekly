properties([
    parameters([
        choice(choices: ['source', 'package'], name: 'build_gramine'),
        string(defaultValue: 'master', name: 'gramine_commit'),
        string(defaultValue: 'master', name: 'gsc_commit'),
        string(defaultValue: '10', name: 'iterations'),
        booleanParam('edmm')
    ])
])

pipeline{
    agent {
        label 'JK_POOL_MASTER'
    }
    stages {
        stage("") {
            parallel {
                stage("") {
                    stages{
                        stage("Run redis baremetal perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine),  string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'redis_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx-single-thread-non-exitless'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run redis container perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'redis_perf'), string(name: 'exec_mode', value: 'native,gramine-sgx-single-thread-non-exitless'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run tf_serving perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'tf_serving_perf'), string(name: 'exec_mode', value: 'native,gramine-sgx'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run memcached perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'memcached_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx-single-thread-non-exitless'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run pytorch perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'pytorch_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: '3'), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                    }
                }
                stage(" ") {
                    stages{
                        stage("Run openvino Latency perf"){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'ov_perf_latency'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run Tensorflow perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'tf_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run openvino throughput perf"){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'ov_perf_throughput'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage("Run Tensorflow encryption perf") {
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'tf_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: iterations), string(name: 'encryption', value: 'true'), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage('Run ovms_perf'){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'ovms_perf'), string(name: 'exec_mode', value: 'native,gramine-sgx'), string(name: 'iterations', value: '20'), string(name: 'encryption', value: 'true'), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                    }
                }
                stage("  ") {
                    stages{
                        stage('sklearn_perf'){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'baremetal'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'run', value: 'sklearnex_perf'), string(name: 'exec_mode', value: 'native,gramine-direct,gramine-sgx'), string(name: 'iterations', value: iterations), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage('mysql_perf'){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'mysql_perf'), string(name: 'exec_mode', value: 'native,gramine-sgx'), string(name: 'iterations', value: iterations), string(name: 'encryption', value: 'true'), string(name: 'tmpfs', value: 'true'), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                        stage('mariadb_perf'){
                            steps{
                                script{
                                    def job = build propagate: false, job: 'gramerf_performance_benchmarking', parameters: [string(name: 'perf_config', value: 'container'), string(name: 'build_gramine', value: build_gramine), string(name: 'gramine_commit', value: gramine_commit), string(name: 'gsc_commit', value: gsc_commit), string(name: 'run', value: 'mariadb_perf'), string(name: 'exec_mode', value: 'native,gramine-sgx'), string(name: 'iterations', value: iterations), string(name: 'encryption', value: 'true'), string(name: 'tmpfs', value: 'true'), booleanParam(name: 'edmm', value: edmm)]
                                    dir ('artifacts'){
                                        copyArtifacts projectName: 'gramerf_performance_benchmarking', selector: specific("${job.number}")
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'artifacts/**', followSymlinks: false
                    cleanWs()
                }
            }
        }
    }
}